source("http://bioconductor.org/biocLite.R")
biocLite("org.Hs.eg.db")
ls
library(org.Hs.eg.db)
require("org.Hs.egALIAS2EG")
install.packages('org.Hs.egALIAS2EG')
gene<-c("PPP3CC","DNMT1","SMS","MTHFR")
egs <- unlist(mget(gene1, org.Hs.egALIAS2EG))
egs <- unlist(mget(gene, org.Hs.egALIAS2EG))
egs
mget]
mget
?mget
getwd()
source("http://bioconductor.org/biocLite.R")
?source
library(survival)
data(veteran)
attach(veteran)
surv <- Surv(time, status)
fit <- coxph(surv ~ trt + age + prior, data=veteran)
summary(fit)
library(survival)
library(rms)
data(veteran)
fit.cph <- cph(surv ~ trt + age + prior, data=veteran, x=TRUE, y=TRUE, surv=TRUE)
# Summary fails!?
#summary(fit.cph)
# Get the Dxy
v <- validate(fit.cph, dxy=TRUE, B=100)
# Is this the correct value?
Dxy = v[rownames(v)=="Dxy", colnames(v)=="index.corrected"]
# The c-statistic according to the Dxy=2(c-0.5)
Dxy/2+0.5
install.packages("rms")
library(survival)
library(rms)
data(veteran)
fit.cph <- cph(surv ~ trt + age + prior, data=veteran, x=TRUE, y=TRUE, surv=TRUE)
# Summary fails!?
#summary(fit.cph)
# Get the Dxy
v <- validate(fit.cph, dxy=TRUE, B=100)
# Is this the correct value?
Dxy = v[rownames(v)=="Dxy", colnames(v)=="index.corrected"]
# The c-statistic according to the Dxy=2(c-0.5)
Dxy/2+0.5
library(rms)
Walk1d <- function() {
+ n <- 100
+ y <- vector(length=n)
+ y[1] <- 0
+ for (i in 2:n) y[i] <- y[(i-1)] + sample(c(-1,1),1)
+ plot(1:n,y,type='l',ylim=c(-20,20))
+ }
> Walk1d()
Walk1d <- function() {n <- 100 y <- vector(length=n) y[1] <- 0 for (i in 2:n) y[i] <- y[(i-1)] + sample(c(-1,1),1) plot(1:n,y,type='l',ylim=c(-20,20))}
Walk1d()
Walk1d <- function() {n <- 100
y <- vector(length=n)
y[1] <- 0 for (i in 2:n)
y[i] <- y[(i-1)]
sample(c(-1,1),1)
plot(1:n,y,type='l',ylim=c(-20,20))
}
Walk1d()
Walk1d <- function() {n <- 100
y <- vector(length=n)
y[1] <- 0 for (i in 2:n)
y[i] <- y[(i-1)] sample(c(-1,1),1)
plot(1:n,y,type='l',ylim=c(-20,20))
}
Walk1d()
Walk1d <- function() {
n <- 100
y <- vector(length=n)
y[1] <- 0 for (i in 2:n)
y[i] <- y[(i-1)] sample(c(-1,1),1)
plot(1:n,y,type='l',ylim=c(-20,20))
}
Walk1d()
Walk1d <- function() {
n <- 100
y <- vector(length=n)
y[i] <- 0 for (i in 2:n)
y[i] <- y[(i-1)]
sample(c(-1,1),1)
plot(1:n,y,type='l',ylim=c(-20,20))
}
Walk1d()
Walk1d <- function() {
n <- 100
y <- vector(length=n)
y[1] <- 0 for (i in 2:n)
y[i] <- y[(i-1)]
sample(c(-1,1),1)
plot(1:n,y,type='l',ylim=c(-20,20))
}
Walk1d <- function() {
n <- 100
y <- vector(length=n)
y[1] <- 0
for (i in 2:n) y[i] <- y[(i-1)]
sample(c(-1,1),1)
plot(1:n,y,type='l',ylim=c(-20,20))
}
Walk1d()
Walk1d <- function() {
n <- 100
y <- vector(length=n)
y[1] <- 0
for (i in 2:n)
y[i] <- y[(i-1)]
sample(c(-1,1),1)
plot(1:n,y,type='l',ylim=c(-20,20))
}
Walk1d()
Walk1d <- function() {
n <- 100
y <- vector(length=n)
y[1] <- 0
for (i in 2:n)
y[i] <- y[(i-1)]
sample(c(-1,1),1)
plot(1:n,y,type='l',ylim=c(-20,20))
}
Walk1d()
Walk1d <- function() {
n <- 100
y <- vector(length=n)
y[1] <- 0
for (i in 2:n) y[i] <- y[(i-1)] + sample(c(-1,1),1)
}
Walk1d()
Walk1d <- function() {
n <- 100
y <- vector(length=n)
y[1] <- 0
for (i in 2:n) y[i] <- y[(i-1)] + sample(c(-1,1),1)
plot(1:n,y,type='l',ylim=c(-20,20))
}
Walk1d()
Walk1d <- function() {
n <- 100
y <- vector(length=n)
y[1] <- 0
for (i in 2:n) y[i] <- y[(i-1)] + sample(c(-1,1),1)
plot(1:n,y,type='l',ylim=c(-20,20))
}
Walk1d()
par(mfrow=c(2,2))
Walk2d<-function(){
xstart <- 0
ystart <- 0
xmove <- sample(c(-1,1),500,repl=T)
ymove <- sample(c(-1,1),500,repl=T)
xmove <- xstart + cumsum(xmove)
ymove <- ystart + cumsum(ymove)
plot(xmove,ymove,xlim=c(-40,40),ylim=c(-
40,40),xlab=¡±x¡±,ylab=¡±y¡±,type=¡¯l¡¯)
}
for (i in 1:4) Walk2d()
par(mfrow=c(2,2))
Walk2d<-function(){
xstart <- 0
ystart <- 0
xmove <- sample(c(-1,1),500,repl=T)
ymove <- sample(c(-1,1),500,repl=T)
xmove <- xstart + cumsum(xmove)
ymove <- ystart + cumsum(ymove)
plot(xmove,ymove,xlim=c(-40,40),ylim=c(-40,40),xlab=¡±x¡±,ylab=¡±y¡±,type=¡¯l¡¯)
}
for (i in 1:4) Walk2d()
par(mfrow=c(2,2))
Walk2d<-function(){
xstart <- 0
ystart <- 0
xmove <- sample(c(-1,1),500,repl=T)
ymove <- sample(c(-1,1),500,repl=T)
xmove <- xstart + cumsum(xmove)
ymove <- ystart + cumsum(ymove)
plot(xmove,ymove,xlim=c(-40,40),ylim=c(-40,40),xlab=¡±x¡±,ylab=¡±y¡±,type=¡¯l¡¯)
}
par(mfrow=c(2,2))
Walk2d<-function(){
xstart <- 0
ystart <- 0
xmove <- sample(c(-1,1),500,repl=T)
ymove <- sample(c(-1,1),500,repl=T)
xmove <- xstart + cumsum(xmove)
ymove <- ystart + cumsum(ymove)
plot(xmove,ymove,xlim=c(-40,40),ylim=c(-40,40),xlab=¡±x¡±,ylab=¡±y¡±,type=¡¯l¡¯)
}
for (i in 1:4) Walk2d()
par(mfrow=c(2,2))
Walk2d<-function(){
xstart <- 0
ystart <- 0
xmove <- sample(c(-1,1),500,repl=T)
ymove <- sample(c(-1,1),500,repl=T)
xmove <- xstart + cumsum(xmove)
ymove <- ystart + cumsum(ymove)
plot(xmove,ymove,xlim=c(-40,40),ylim=c(-40,40),xlab="x",ylab="y",type='l')
}
for (i in 1:4) Walk2d()
fix(egs)
fix(egs)
library("party")
utils:::menuInstallLocal()
head(iris)
data(iris)
data()
str(iris)
iris_ctree <- ctree(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data=iris)
library(party)
iris_ctree <- ctree(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data=iris)
print(iris_ctree)
?ctree
library(party)
str(iris)
set.seed(1234)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.7, 0.3))
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
myFormula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
iris_ctree <- ctree(myFormula, data=trainData)
table(predict(iris_ctree), trainData$Species)
utils:::menuInstallLocal()
library(party)
str(iris)
set.seed(1234)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.7, 0.3))
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
myFormula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
iris_ctree <- ctree(myFormula, data=trainData)
utils:::menuInstallLocal()
table(predict(iris_ctree), trainData$Species)
library(party)
str(iris)
set.seed(1234)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.7, 0.3))
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
myFormula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
iris_ctree <- ctree(myFormula, data=trainData)
utils:::menuInstallLocal()
table(predict(iris_ctree), trainData$Species)
library(party)
str(iris)
set.seed(1234)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.7, 0.3))
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
myFormula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
iris_ctree <- ctree(myFormula, data=trainData)
table(predict(iris_ctree), trainData$Species)
library(party)
str(iris)
set.seed(1234)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.7, 0.3))
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
trainData
testData
myFormula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
iris_ctree <- ctree(myFormula, data=trainData)
summary(iris_ctree)
iris_ctree
predict(iris_ctree)
?predict
predict(iris_ctree, newdata = testData)
testData
rownums(testData)
rowNums(testData)
rowsum(testData)
rowsums(testData)
predict(iris_ctree, newdata = testData)
table(testPred, testData$Species)
testPred <- predict(iris_ctree, newdata = testData)
table(testPred, testData$Species)
library(mboost)
library(mboost)
data("bodyfat", package = "mboost")
dim(bodyfat)
attributes(bodyfat)
set.seed(1234)
ind <- sample(2, nrow(bodyfat), replace=TRUE, prob=c(0.7, 0.3))
bodyfat.train <- bodyfat[ind==1,]
bodyfat.test <- bodyfat[ind==2,]
head(bodyfat)
help(package=DEXfa)
help(package=mboost)
library(rpart)
myFormula <- DEXfat ~ age + waistcirc + hipcirc + elbowbreadth + kneebreadth
bodyfat_rpart <- rpart(myFormula, data = bodyfat.train,control = rpart.control(minsplit = 10))
attributes(bodyfat_rpart)
print(bodyfat_rpart$cptable)
print(bodyfat_rpart)
plot(bodyfat_rpart)
text(bodyfat_rpart, use.n=T)
library(rpart)
myFormula <- DEXfat ~ age + waistcirc + hipcirc + elbowbreadth + kneebreadth
bodyfat_rpart <- rpart(myFormula, data = bodyfat.train,control = rpart.control(minsplit = 10))
attributes(bodyfat_rpart)
print(bodyfat_rpart$cptable)
print(bodyfat_rpart)
plot(bodyfat_rpart)
text(bodyfat_rpart, use.n=T)
#install.packages("mboost")
library(mboost)
data("bodyfat", package = "mboost")
dim(bodyfat)
attributes(bodyfat)
bodyfat[1:5,]
set.seed(1234)
ind <- sample(2, nrow(bodyfat), replace=TRUE, prob=c(0.7, 0.3))
bodyfat.train <- bodyfat[ind==1,]
bodyfat.test <- bodyfat[ind==2,]
# train a decision tree
#body fat measured by DXA, response variable
library(rpart)
myFormula <- DEXfat ~ age + waistcirc + hipcirc + elbowbreadth + kneebreadth
bodyfat_rpart <- rpart(myFormula, data = bodyfat.train,control = rpart.control(minsplit = 10))
attributes(bodyfat_rpart)
print(bodyfat_rpart$cptable)
print(bodyfat_rpart)
plot(bodyfat_rpart)
text(bodyfat_rpart, use.n=T)
?prune
opt <- which.min(bodyfat_rpart$cptable[,"xerror"])
cp <- bodyfat_rpart$cptable[opt, "CP"]
cp
bodyfat_rpart$cptable[,"xerror"]
predict(bodyfat_rpart, newdata = bodyfat.test)
head(bodyfat)
predict(bodyfat_rpart, newdata = bodyfat.test)
predict(bodyfat_rpart, bodyfat.test)
predict(bodyfat_rpart,bodyfat.test)
predict(bodyfat_rpart, newdata = bodyfat.test)
a=predict(bodyfat_rpart, newdata = bodyfat.test)
a
summary(a)
head(bodyfa)
head(bodyfat)
year <- rep(2008:2010, each=4)
quarter <- rep(1:4, 3)
cpi <- c(162.2, 164.6, 166.5, 166.0,166.2, 167.0, 168.6, 169.5,171.0, 172.1, 173.3, 174.0)
#»­Í¼
plot(cpi, xaxt="n", ylab="CPI", xlab="")
axis(1, labels=paste(year,quarter,sep="Q"), at=1:12, las=3)
cor(year,cpi)
cor(quarter,cpi)
fit <- lm(cpi ~ year + quarter)
fit
#Ô¤²â
data2011 <- data.frame(year=2011, quarter=1:4)
cpi2011 <- predict(fit, newdata=data2011)
#¿ÉÊÓ»¯
style <- c(rep(1,12), rep(2,4))
plot(c(cpi, cpi2011), xaxt="n", ylab="CPI", xlab="", pch=style, col=style)
axis(1, at=1:16, las=3,
labels=c(paste(year,quarter,sep="Q"), "2011Q1", "2011Q2", "2011Q3", "2011Q4"))
data("bodyfat", package="mboost")
myFormula <- DEXfat ~ age + waistcirc + hipcirc + elbowbreadth + kneebreadth
bodyfat.glm <- glm(myFormula, family = gaussian("log"), data = bodyfat)
summary(bodyfat.glm)
pred <- predict(bodyfat.glm, type="response")
pred
x1<-rep(c(1, 0, 1, 0, 1), c(5, 10, 10, 10, 10))
x2<-c(17, 44, 48, 55, 75, 35, 42, 57, 28, 20,38, 45, 47, 52, 55, 68, 18, 68, 48, 17,70, 72, 35, 19, 62, 39, 40, 55, 68, 25,17, 45, 44, 67, 55, 61, 19, 69, 23, 19,72, 74, 31, 16, 61)
x3<-c(1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0,1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1,0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1)
y<-c(1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1,0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0,0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1,0, 1, 0, 0)
accident<-data.frame(x1, x2, x3, y)
#Âß¼­Ë¹µÙ»Ø¹é
log.glm<-glm(y~x1+x2+x3, family=binomial, data=accident)
summary(log.glm)
#Ä£ÐÍµÄÕï¶ÏÓë¸üÐÂ,ÔÚ´ËÄ£ÐÍÖÐ, ÓÉÓÚ²ÎÊý¡¥2; ¡¥3Ã»ÓÐÍ¨¹ý¼ìÑé, ¿ÉÀàËÆÓÚÏßÐÔÄ£ÐÍ, ÓÃstep()×ö±äÁ¿É¸Ñ¡.
log.step<-step(log.glm)
summary(log.step)
log.pre<-predict(log.step, data.frame(x1=1))
log.pre
newiris <- iris
newiris$Species <- NULL
(kc <- kmeans(newiris, 3)) 
table(iris$Species, kc$cluster)
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3, pch=8, cex=2)
q()
