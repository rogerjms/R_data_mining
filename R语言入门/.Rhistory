1+1;
"Hello!";
1+1;
"Hello!";
"Hello!";
"Hello!";
"Hello!";
"Hello!";
1+1;
"Hello!";
1+1;
"Hello!";
"Hello!";
"Hello!";
"Hello!";
"Hello!";
"Hello!";
1+1;
"Hello!";
source('C:/Users/wanp/Desktop/test.R')
"Hello!";
"Hello!";
source('C:/Users/wanp/Desktop/test.R')
"Hello!";
1+1;
"Hello!";
testit <- ...="..." function="function"
"Hello!";
"Hello!";
1+1;
"Hello!";
1+1;
"Hello!";
"Hello world!"
"Hello world!"
library("bnlearn", lib.loc="C:/Users/wanp/Documents/R/win-library/2.15")
detach("package:datasets", unload=TRUE)
detach("package:graphics", unload=TRUE)
detach("package:grDevices", unload=TRUE)
detach("package:methods", unload=TRUE)
detach("package:stats", unload=TRUE)
detach("package:utils", unload=TRUE)
install.packages("bnlearn")
install.packages(c("munsell", "RGraphics"))
detach("package:datasets", unload=TRUE)
detach("package:graphics", unload=TRUE)
library("ggplot2", lib.loc="C:/Users/wanp/Documents/R/win-library/2.15")
install.packages("ggplots")
q()
library("ggplot2", lib.loc="C:/Users/wanp/Documents/R/win-library/2.15")
library("bnlearn", lib.loc="C:/Users/wanp/Documents/R/win-library/3.0")
install.packages("bnlearn")
library("ggplot2", lib.loc="C:/Users/wanp/Documents/R/win-library/3.0")
install.packages("ggplot2")
library ggplot2
library("bnlearn", lib.loc="C:/Users/wanp/Documents/R/win-library/3.0")
install.packages("bnlearn")
library("ggplot2", lib.loc="C:/Users/wanp/Documents/R/win-library/3.0")
install.packages("ggplot2")
library("GEOquery", lib.loc="C:/Users/wanp/Documents/R/win-library/3.0")
setRepositories()
setRepositories()
library("Biobase", lib.loc="C:/Users/wanp/Documents/R/win-library/3.0")
library("bnlearn")
y <- matrix(1:20, nrow=5, ncol=4)
y <- matrix(1:20, nrow=5, ncol=4)
y
z <- array(1:24, c(2, 3, 4))
z
patientID <- c(1, 2, 3, 4)
age <- c(25, 34, 28, 52)
diabetes <- c("Type1", "Type2", "Type1", "Type1")
status <- c("Poor", "Improved", "Excellent", "Poor")
patientdata <- data.frame(patientID, age, diabetes, status)
patientdata
rec <- list(name="李明", age=30, scores=c(85, 76, 90))
rec
rec <- list(name="LiMing", age=30, scores=c(85, 76, 90))
rec <- list(name="LiMing", age=30, scores=c(85, 76, 90))
rec
y <- matrix(1:20, nrow=5, ncol=4)
y
a = c(1,2,3,4,5)
a
b = c("one", "two", "three")
b
c = c(TRUE, TRUE, TRUE, FALSE, TRUE, FALSE)
c
a=c(1:10)
plot(a)
a=1
b=2
c=a+b
c
a = c(1,2,3,4,5)
a
sum(a)
b = c("one", "two", "three")
b
c = c(TRUE, TRUE, TRUE, FALSE, TRUE, FALSE)
c
y <- matrix(1:20, nrow=5, ncol=4)
y
y[2][1]
y <- matrix(1:20, nrow=5, ncol=4)
y
y[3][2]
y <- matrix(1:20, nrow=5, ncol=4)
y
y[3][1]
y <- matrix(1:20, nrow=5, ncol=4)
y
y[3][2]
y <- matrix(1:20, nrow=5, ncol=4)
y
y[3,2]
d=rep(2,times=4)
d
e=seq(from=3, to=21, by=3 )
e
“:”
f=(1:10)
f=c(1:10)
f=c(1:10)
f
d=rep(2,times=4)
d
e=seq(from=3, to=21, by=3 )
e
f=c(1:10)
f
fix(a)
?seq
?rep
mode(f)
class(f)
?mode
?mode(3.14)
?scan
pp<-scan("scan.dat")
pp = scan("scan.dat")
pp = scan("scan.dat")
pp = scan("scan.dat")
pp = scan("\scan.dat")
pp = scan(":\scan.dat")
pp = scan(":/scan.dat")
pp = scan("../scan.dat")
pp = scan("..\scan.dat")
pp = scan("scan.dat")
NCBIdata<-read.csv("NCBI_data.csv", header=T)
NCBIdata
X<-c(0,1,2,3)
Probability<-c(0.208,0.167,0.25,0.375)
N<-c ('A', 'C', 'G', 'U')
barplot (Prob, names=N, ylab="Probability", main="RNA Residue Analysis", sub="Bases", col= c("red","blue","yellow","green"))
X<-c(0,1,2,3)
Pro<-c(0.208,0.167,0.25,0.375)
N<-c ('A', 'C', 'G', 'U')
barplot (Prob, names=N, ylab="Probability", main="RNA Residue Analysis", sub="Bases", col= c("red","blue","yellow","green"))
X<-c(0,1,2,3)
Prob<-c(0.208,0.167,0.25,0.375)
N<-c ('A', 'C', 'G', 'U')
barplot (Prob, names=N, ylab="Probability", main="RNA Residue Analysis", sub="Bases", col= c("red","blue","yellow","green"))
X<-c(0,1,2,3)
Prob<-c(0.208,0.167,0.25,0.375)
N<-c ('A', 'C', 'G', 'U')
barplot (Prob, names=N, ylab="Probability", main="RNA Residue Analysis", sub="Bases", col= c("red","blue","yellow","green"))
box()
?stemplot
?stem
stem(log10(islands))
stem(islands)
stem(log10(islands))
x=rnorm(100,mean=60,sd=15)
stem(x)
x=rnorm(100,mean=60,sd=15)
stem(x)
x1=c(2,4,3,2,4,7,7,2,2,5,4)
x2=c(5,6,8,5,10,7,12,12,6,6)
x3=c(7,11,6,6,7,9,5,5,10,6,3,10)
boxplot(x1,x2,x3)
settings<-c("High","Medium","Low")
settings<-factor(settings)
settings
settings<-c("High","Medium","Low","Medium")
settings<-factor(settings)
settings
settings<-c("High","Medium","Low","Medium","High")
settings<-factor(settings)
settings
?lines
a1<-seq(0,2,0.01)
b1<-seq(0,1,0.01)
f<-function(a1,b1) ifelse(a1<=1, 11*a1*log10(a1)*b1*(b1-1)+exp(-((25*a1-25/exp(1))^2+(25*b1-25/2)^2)^3)/25, 11*(a1-1)*log10(abs(a1-1))*b1*(b1-1)+exp(-((25*(a1-1)-25/exp(1))^2+(25*b1-25/2)^2)^3)/25)
c1<-outer(a1,b1,f)
persp(a1,b1,c1,theta=30,phi=30,expand=0.5,col="lightyellow")
?plot
x = rnorm(10)
y = rnorm(10)
plot(x,y)
x = rnorm(10)
y = rnorm(10)
plot(x,y)
plot(x,y,type="b",main="main title",sub='sub title',xlab="x axis",ylab='y axis',asp=0.2)
x = rnorm(10)
y = rnorm(10)
plot(x,y)
plot(x,y, type="l")
x = rnorm(10)
y = rnorm(10)
plot(x,y)
x = rnorm(10)
y = x*x
plot(x,y)
x = c(1:5)
y = x*x
plot(x,y)
x = c(-5:5)
y = x*x
plot(x,y)
x = c(-5:5)
y = x*x
plot(x,y)
plot(x,y, type="l")
x = c(-5:5)
y = x*x
plot(x,y)
plot(x,y, type="l")
plot(x,y,type="b",main="main title",sub='sub title',xlab="x axis",ylab='y axis',asp=0.2)
x = c(-5:5)
y = x*x
plot(x,y)
plot(x,y, type="b")
plot(x,y,type="b",main="main title",sub='sub title',xlab="x axis",ylab='y axis',asp=0.2)
x = c(-5:5)
y = x*x
plot(x,y)
plot(x,y, type="b")
plot(x,y,type="b",main="main title",sub='sub title',xlab="x axis",ylab='y axis',asp=1)
?plot
x = c(-5:5)
y = x*x
plot(x,y)
plot(x,y, type="b")
plot(x,y,type="b",main="main title",sub='sub title',xlab="x axis",ylab='y axis',asp=1)
x = c(-5:5)
y = x*x
plot(x,y)
plot(x,y, type="b")
plot(x,y,type="b",main="main title",sub='sub title',xlab="x axis",ylab='y axis',asp=0.5)
x = c(-5:5)
y = x*x
plot(x,y)
plot(x,y, type="b")
plot(x,y,type="b",main="main title",sub='sub title',xlab="x axis",ylab='y axis',asp=0.2)
x = c(-5:5)
y = x*x
plot(x,y)
plot(x,y, type="b")
plot(x,y,type="b",main="main title",sub='sub title',xlab="x axis",ylab='y axis',asp=0.3)
?plot
plot(x,y, type="p")
plot(x,y, type="b")
plot(x,y, type="l")
plot(x,y, type=“c")
plot(x,y, type=“c")
plot(x,y, type="c")
plot(x,y, type="o")
plot(x,y, type=“h")
plot(x,y, type="h")
plot(x,y, type="s")
plot(x,y, type="S")
plot(x,y, type="n")
x = c(-5:5)
y = x*x
plot(x,y)
plot(x,y, type="b")
plot(x,y, type="p")
plot(x,y, type="l")
plot(x,y, type="c")
plot(x,y, type="o")
plot(x,y, type="h")
plot(x,y, type="s")
plot(x,y, type="S")
plot(x,y, type="n") # "n" for no plotting.
plot(x,y,type="b",main="main title",sub='sub title',xlab="x axis",ylab='y axis',asp=0.3)
plot(x,y, type="o")
plot(x,y, type="p")
plot(x,y, type="p",pch=2)
?plot
library("ggplot2", lib.loc="C:/Users/wanp/Documents/R/win-library/3.0")
install.packages("ggplot2")
library("ggplot2")
# create factors with value labels
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mtcars$am <- factor(mtcars$am,levels=c(0,1),
labels=c("Automatic","Manual"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
# create factors with value labels
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mtcars$am <- factor(mtcars$am,levels=c(0,1),
labels=c("Automatic","Manual"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
# Kernel density plots for mpg
# grouped by number of gears (indicated by color)
qplot(mpg, data=mtcars, geom="density", fill=gear, alpha=I(.5),
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
# create factors with value labels
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mtcars$am <- factor(mtcars$am,levels=c(0,1),
labels=c("Automatic","Manual"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
# Kernel density plots for mpg
# grouped by number of gears (indicated by color)
qplot(mpg, data=mtcars, geom="density", fill=gear, alpha=I(.5),
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
# Scatterplot of mpg vs. hp for each combination of gears and cylinders
# in each facet, transmittion type is represented by shape and color
qplot(hp, mpg, data=mtcars, shape=am, color=am,
facets=gear~cyl, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon")
# create factors with value labels
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mtcars$am <- factor(mtcars$am,levels=c(0,1),
labels=c("Automatic","Manual"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
# Kernel density plots for mpg
# grouped by number of gears (indicated by color)
qplot(mpg, data=mtcars, geom="density", fill=gear, alpha=I(.5),
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
# Scatterplot of mpg vs. hp for each combination of gears and cylinders
# in each facet, transmittion type is represented by shape and color
qplot(hp, mpg, data=mtcars, shape=am, color=am,
facets=gear~cyl, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon")
# Separate regressions of mpg on weight for each number of cylinders
qplot(wt, mpg, data=mtcars, geom=c("point", "smooth"),
method="lm", formula=y~x, color=cyl,
main="Regression of MPG on Weight",
xlab="Weight", ylab="Miles per Gallon")
# create factors with value labels
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mtcars$am <- factor(mtcars$am,levels=c(0,1),
labels=c("Automatic","Manual"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
# Kernel density plots for mpg
# grouped by number of gears (indicated by color)
qplot(mpg, data=mtcars, geom="density", fill=gear, alpha=I(.5),
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
# Scatterplot of mpg vs. hp for each combination of gears and cylinders
# in each facet, transmittion type is represented by shape and color
qplot(hp, mpg, data=mtcars, shape=am, color=am,
facets=gear~cyl, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon")
# Separate regressions of mpg on weight for each number of cylinders
qplot(wt, mpg, data=mtcars, geom=c("point", "smooth"),
method="lm", formula=y~x, color=cyl,
main="Regression of MPG on Weight",
xlab="Weight", ylab="Miles per Gallon")
# Boxplots of mpg by number of gears
# observations (points) are overlayed and jittered
qplot(gear, mpg, data=mtcars, geom=c("boxplot", "jitter"),
fill=gear, main="Mileage by Gear Number",
xlab="", ylab="Miles per Gallon")
plot(x,y, type="p",pch=2, col="blue", cex=0.9)
plot(x,y, type="p",pch=2, col="blue", cex=3.9)
plot(x,y, type="p",pch=2, col="blue", cex=2.9)
x = c(-5:5)
y = x*x
hist(x,y)
x = scan(file="hist.dat")
hist(x, xlab="Frequence ", ylab="Number of 6-mers ", main="Frequence distribution of 6-mers in reverse strand ", col="grey",border="white",breaks=100)
box(col="grey")
x = scan(file="minus.freq")
hist(x, xlab="Frequence ", ylab="Number of 6-mers ", main="Frequence distribution of 6-mers in reverse strand ", col="grey",border="white",breaks=100)
box(col="grey")
setwd("D:/D/0_Teaching/BCC/R/R_Scripts")
x = scan(file="hist.dat")
hist(x, xlab="Frequence ", ylab="Number of 6-mers ", main="Frequence distribution of 6-mers in reverse strand ", col="grey",border="white",breaks=100)
box(col="grey")
x = scan(file="minus.freq")
hist(x, xlab="Frequence ", ylab="Number of 6-mers ", main="Frequence distribution of 6-mers in reverse strand ", col="grey",border="white",breaks=100)
box(col="grey")
x = scan(file="hist.dat")
hist(x, xlab="Frequence ", ylab="Number of 6-mers ", main="Frequence distribution of 6-mers in reverse strand ", col="grey",border="white",breaks=100)
box(col="grey")
x = scan(file="hist.dat")
hist(x, xlab="Frequence ", ylab="Number of 6-mers ", main="Frequence distribution of 6-mers in reverse strand ", col="grey",border="red",breaks=100)
box(col="grey")
x = scan(file="hist.dat")
hist(x, xlab="Frequence ", ylab="Number of 6-mers ", main="Frequence distribution of 6-mers in reverse strand ", col="grey",border="blue",breaks=50)
box(col="grey")
?curve
x = scan(file="hist.dat")
hist(x, xlab="Frequence ", ylab="Number of 6-mers ", main="Frequence distribution of 6-mers in reverse strand ", col="grey",border="white",breaks=100)
box(col="grey")
?hist
x=rnorm(100)
x
sample(4:20, size = 6)
x=sample(1:100,size=100)
x
x=sample(1:100,size=100)
x
bins=seq(0,100,by=10)
hist(x,breaks=bins)
x=sample(1:100,size=100)
x
bins=seq(1,100,by=10)
hist(x,breaks=bins)
bins=seq(1,100,by=10)
bins
bins=seq(0,100,by=10)
bins
x=sample(1:100,size=100)
x
bins=seq(0,100,by=10)
bins
hist(x,breaks=bins)
x=sample(1:100,size=1000)
x
bins=seq(0,100,by=10)
bins
hist(x,breaks=bins)
x=sample(1:90,size=1000)
x
bins=seq(0,100,by=10)
bins
hist(x,breaks=bins)
x=sample(1:90,size=1000)
x
bins=seq(0,100,by=5)
bins
hist(x,breaks=bins)
x=sample(1:80,size=1000)
x
bins=seq(0,100,by=5)
bins
hist(x,breaks=bins)
x=sample(1:80,size=1000)
x
?sample
x=sample(1:80,size=1000,replace=TRUE)
x
x=sample(1:80,size=1000,replace=TRUE)
x
bins=seq(0,100,by=5)
bins
hist(x,breaks=bins)
x=sample(1:80,size=100,replace=TRUE)
x
bins=seq(0,100,by=5)
bins
hist(x,breaks=bins)
x=sample(1:100,size=82,replace=TRUE)
x
bins=seq(0,100,by=5)
bins
hist(x,breaks=bins)
x=sample(1:100,size=82,replace=TRUE)
x
bins = seq(0,100,by=10)
bins
hist(x,breaks=bins)
x=sample(40:100,size=82,replace=TRUE)
x
bins = seq(0,100,by=10)
bins
hist(x,breaks=bins)
x=sample(40:98,size=82,replace=TRUE)
x
bins = seq(0,100,by=10)
bins
hist(x,breaks=bins)
x=sample(40:98,size=82,replace=TRUE)
x
bins = seq(0,100,by=10)
bins
hist(x,breaks=bins)
x=sample(40:98,size=82,replace=TRUE)
x
bins = seq(0,100,by=10)
bins
hist(x,breaks=bins)
x=sample(40:98,size=82,replace=TRUE)
x
hist(x,breaks=bins)
x=sample(40:98,size=82,replace=TRUE)
x
bins = seq(0,100,by=10)
bins
hist(x,breaks=bins)
x = scan(file="hist.dat")
hist(x, xlab="Frequence ", ylab="Number of 6-mers ", main="Frequence distribution of 6-mers in reverse strand ", col="grey",border="white",breaks=100)
box(col="grey")
x = scan(file="hist.dat")
hist(x, xlab="Frequence ", ylab="Number of 6-mers ", main="Frequence distribution of 6-mers in reverse strand ", col="grey",border="blue",breaks=50)
box(col="grey")
